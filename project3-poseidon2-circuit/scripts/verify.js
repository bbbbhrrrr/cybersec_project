const fs = require('fs');
const path = require('path');
const snarkjs = require('snarkjs');

/*
 * Verify Zero-Knowledge Proof
 * 
 * This script verifies a Groth16 proof generated by the prove script.
 * It demonstrates the verification process for zero-knowledge proofs.
 */

async function main() {
    console.log('🔍 Verifying Zero-Knowledge Proof...\n');
    
    const setupDir = path.join(__dirname, '../setup');
    const proofsDir = path.join(__dirname, '../proofs');
    
    const vkeyPath = path.join(setupDir, 'verification_key.json');
    const proofPath = path.join(proofsDir, 'proof.json');
    const publicPath = path.join(proofsDir, 'public.json');
    
    // Check required files
    if (!fs.existsSync(vkeyPath)) {
        console.error('❌ Verification key not found. Please run setup script first.');
        process.exit(1);
    }
    
    if (!fs.existsSync(proofPath)) {
        console.error('❌ Proof not found. Please run prove script first.');
        process.exit(1);
    }
    
    if (!fs.existsSync(publicPath)) {
        console.error('❌ Public inputs not found. Please run prove script first.');
        process.exit(1);
    }
    
    try {
        console.log('📁 Verification key:', vkeyPath);
        console.log('📁 Proof file:', proofPath);
        console.log('📁 Public inputs:', publicPath);
        console.log();
        
        // Load verification artifacts
        console.log('📖 Loading verification artifacts...');
        const vKey = JSON.parse(fs.readFileSync(vkeyPath));
        const proof = JSON.parse(fs.readFileSync(proofPath));
        const publicSignals = JSON.parse(fs.readFileSync(publicPath));
        
        console.log('  ✅ Verification key loaded');
        console.log('  ✅ Proof loaded');
        console.log('  ✅ Public inputs loaded');
        
        // Show verification details
        console.log('\n📊 Verification Details:');
        console.log(`  🎯 Public hash: ${publicSignals[0]}`);
        console.log(`  📏 Proof size: ${JSON.stringify(proof).length} bytes`);
        console.log(`  🔢 Public signals count: ${publicSignals.length}`);
        
        // Perform verification
        console.log('\n⚙️  Verifying proof...');
        const startTime = Date.now();
        
        const isValid = await snarkjs.groth16.verify(vKey, publicSignals, proof);
        
        const verifyTime = Date.now() - startTime;
        console.log(`  ⏱️  Verification time: ${verifyTime}ms`);
        
        // Show verification result
        console.log('\n🎯 Verification Result:');
        if (isValid) {
            console.log('  ✅ PROOF IS VALID');
            console.log('  🔒 The prover knows the preimage of the hash');
            console.log('  🛡️  No information about the preimage was revealed');
        } else {
            console.log('  ❌ PROOF IS INVALID');
            console.log('  🚫 The proof verification failed');
        }
        
        // Performance summary
        console.log('\n📈 Performance Summary:');
        console.log(`  ⚡ Verification time: ${verifyTime}ms`);
        console.log(`  📦 Proof size: ${JSON.stringify(proof).length} bytes`);
        console.log(`  🔢 Gas cost estimate: ~250,000 gas (on Ethereum)`);
        
        // Security analysis
        console.log('\n🛡️  Security Properties:');
        console.log('  ✅ Zero-knowledge: Preimage remains hidden');
        console.log('  ✅ Soundness: Invalid proofs are rejected');
        console.log('  ✅ Completeness: Valid proofs are accepted');
        console.log('  🔐 Cryptographic assumptions: Discrete log, knowledge-of-exponent');
        
        // Generate verification report
        const reportPath = path.join(proofsDir, 'verification_report.json');
        const report = {
            timestamp: new Date().toISOString(),
            isValid: isValid,
            verificationTime: verifyTime,
            proofSize: JSON.stringify(proof).length,
            publicHash: publicSignals[0],
            publicSignalsCount: publicSignals.length
        };
        
        fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
        console.log('\n📄 Verification report saved to verification_report.json');
        
    } catch (error) {
        console.error('❌ Verification failed:');
        console.error(error.message);
        process.exit(1);
    }
}

if (require.main === module) {
    main().catch(console.error);
}

module.exports = { main };
